/**
 * Script para corrigir o problema do postgres.exe ausente
 * Este √© o principal motivo dos OverlappingFileLockException
 */
const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');
const https = require('https');

console.log('üîß CORRE√á√ÉO: PostgreSQL postgres.exe ausente\n');

const pgWinDir = path.join(__dirname, '..', 'backend-spring', 'pg', 'win');
const postgresExe = path.join(pgWinDir, 'postgres.exe');

console.log('üìÅ Diret√≥rio PostgreSQL:', pgWinDir);
console.log('üîç Verificando postgres.exe...');

if (fs.existsSync(postgresExe)) {
    console.log('‚úÖ postgres.exe j√° existe!');
    const stats = fs.statSync(postgresExe);
    console.log(`   Tamanho: ${(stats.size / 1024 / 1024).toFixed(1)} MB`);
    console.log(`   Modificado: ${stats.mtime}`);
    process.exit(0);
}

console.log('‚ùå postgres.exe N√ÉO ENCONTRADO!');
console.log('   Este √© o motivo dos erros OverlappingFileLockException\n');

console.log('üîç Verificando arquivos existentes:');
const existingExes = fs.readdirSync(pgWinDir).filter(f => f.endsWith('.exe'));
console.log('   Execut√°veis encontrados:', existingExes.join(', '));

// Verificar se temos a vers√£o do PostgreSQL
const pgCtlPath = path.join(pgWinDir, 'pg_ctl.exe');
if (fs.existsSync(pgCtlPath)) {
    try {
        const versionOutput = execSync(`"${pgCtlPath}" --version`, { encoding: 'utf8' });
        console.log('   Vers√£o PostgreSQL:', versionOutput.trim());
    } catch (e) {
        console.log('   N√£o foi poss√≠vel determinar a vers√£o');
    }
}

console.log('\nüéØ SOLU√á√ïES POSS√çVEIS:\n');

console.log('1. SOLU√á√ÉO R√ÅPIDA - Copiar de instala√ß√£o existente:');
console.log('   ‚Ä¢ Se voc√™ tem PostgreSQL instalado no seu PC:');
console.log('     copy "C:\\Program Files\\PostgreSQL\\*\\bin\\postgres.exe" "' + postgresExe + '"');
console.log('   ‚Ä¢ Ou de onde o PostgreSQL est√° funcionando no seu ambiente\n');

console.log('2. SOLU√á√ÉO COMPLETA - Download oficial:');
console.log('   ‚Ä¢ Baixe PostgreSQL portable/bin√°rios do site oficial');
console.log('   ‚Ä¢ Extraia apenas o postgres.exe para: ' + pgWinDir);
console.log('   ‚Ä¢ Vers√£o recomendada: PostgreSQL 15.x ou 16.x\n');

console.log('3. SOLU√á√ÉO ALTERNATIVA - Usar instala√ß√£o do sistema:');
console.log('   ‚Ä¢ Configure o aplicativo para usar PostgreSQL instalado no sistema');
console.log('   ‚Ä¢ Modifique application.yml para n√£o usar embedded PostgreSQL\n');

// Tentativa de encontrar postgres.exe no sistema
console.log('üîç Procurando postgres.exe no sistema...\n');

const commonPaths = [
    'C:\\Program Files\\PostgreSQL',
    'C:\\Program Files (x86)\\PostgreSQL',
    'C:\\PostgreSQL',
    process.env.APPDATA ? path.join(process.env.APPDATA, 'postgresql') : null,
    process.env.LOCALAPPDATA ? path.join(process.env.LOCALAPPDATA, 'postgresql') : null
].filter(Boolean);

let foundPostgres = [];

for (const searchPath of commonPaths) {
    try {
        if (fs.existsSync(searchPath)) {
            const found = findPostgresExe(searchPath);
            foundPostgres = foundPostgres.concat(found);
        }
    } catch (e) {
        // Ignore errors in search
    }
}

if (foundPostgres.length > 0) {
    console.log('‚úÖ PostgreSQL encontrado no sistema:');
    foundPostgres.forEach((pgPath, i) => {
        console.log(`   ${i + 1}. ${pgPath}`);
    });
    
    console.log('\nüí° COMANDO PARA COPIAR (escolha um dos caminhos acima):');
    console.log(`copy "${foundPostgres[0]}" "${postgresExe}"`);
    console.log('\n‚ö†Ô∏è  Execute este comando como administrador!');
} else {
    console.log('‚ùå Nenhuma instala√ß√£o PostgreSQL encontrada no sistema');
    
    console.log('\nüì• DOWNLOAD NECESS√ÅRIO:');
    console.log('   1. V√° para: https://www.postgresql.org/download/windows/');
    console.log('   2. Baixe "Binary packages" (n√£o installer)');
    console.log('   3. Extraia postgres.exe para: ' + pgWinDir);
}

console.log('\nüö® DEPOIS DE CORRIGIR:');
console.log('   1. Execute novamente: node scripts/check-deployment-dependencies.js');
console.log('   2. Execute limpeza: node scripts/cleanup-selective.js');  
console.log('   3. Teste o aplicativo');

function findPostgresExe(dir) {
    const found = [];
    try {
        const items = fs.readdirSync(dir);
        for (const item of items) {
            const fullPath = path.join(dir, item);
            const stat = fs.statSync(fullPath);
            
            if (stat.isDirectory()) {
                // Recursivo para subdiret√≥rios
                const subFound = findPostgresExe(fullPath);
                found.push(...subFound);
            } else if (item === 'postgres.exe') {
                found.push(fullPath);
            }
        }
    } catch (e) {
        // Ignore permission errors
    }
    return found;
}
