import { execSync } from 'child_process';
import * as fs from 'fs';
import * as path from 'path';

console.log('üöÄ Iniciando build standalone com Node.js empacotado...');

// Fun√ß√£o para executar comandos
function runCommand(command: string, cwd?: string): void {
    console.log(`üìã Executando: ${command}`);
    try {
        execSync(command, {
            stdio: 'inherit',
            cwd: cwd || process.cwd(),
            shell: 'powershell.exe'
        });
        console.log(`‚úÖ Comando executado com sucesso: ${command}`);
    } catch (error) {
        console.error(`‚ùå Erro ao executar comando: ${command}`);
        console.error(error);
        process.exit(1);
    }
}

// Fun√ß√£o para verificar se um diret√≥rio existe
function checkDirectory(dir: string): boolean {
    return fs.existsSync(dir);
}

// Fun√ß√£o para verificar se um arquivo existe
function checkFile(file: string): boolean {
    return fs.existsSync(file);
}

async function buildStandalone(): Promise<void> {
    try {
        // 1. Verificar se estamos no diret√≥rio raiz
        if (!checkFile('package.json') || !checkDirectory('electron')) {
            console.error('‚ùå Execute este script na raiz do projeto');
            process.exit(1);
        }

        // 2. Instalar depend√™ncias do Electron (incluindo Node.js)
        console.log('\nüì¶ Instalando depend√™ncias do Electron...');
        runCommand('npm install', 'electron');

        // 3. Verificar se o Node.js foi instalado
        const nodePath = path.join('electron', 'node_modules', 'node', 'bin', 'node.exe');
        if (!checkFile(nodePath)) {
            console.error(`‚ùå Node.js n√£o encontrado em: ${nodePath}`);
            console.log('üí° Tentando instalar Node.js manualmente...');
            runCommand('npm install node@20.10.5', 'electron');
        }

        // 4. Build do backend
        console.log('\nüîß Build do backend...');
        runCommand('npm run build', 'backend');

        // 5. Build do frontend
        console.log('\nüé® Build do frontend...');
        runCommand('npm run build --configuration=production', 'frontend');

        // 6. Build do Electron
        console.log('\n‚ö° Build do Electron...');
        runCommand('npm run build', 'electron');

        // 7. Criar distribui√ß√£o
        console.log('\nüì¶ Criando distribui√ß√£o standalone...');
        runCommand('npm run dist:win', 'electron');

        // 8. Verificar se o build foi criado
        const distPath = path.join('electron', 'dist-installer');
        if (!checkDirectory(distPath)) {
            console.error('‚ùå Diret√≥rio de distribui√ß√£o n√£o encontrado');
            process.exit(1);
        }

        // 9. Verificar se o Node.js foi empacotado
        const unpackedPath = path.join(distPath, 'win-unpacked', 'resources');
        const nodeExePath = path.join(unpackedPath, 'node.exe');

        if (checkFile(nodeExePath)) {
            console.log('‚úÖ Node.js empacotado com sucesso!');
            console.log(`üìç Localiza√ß√£o: ${nodeExePath}`);
        } else {
            console.warn('‚ö†Ô∏è Node.js n√£o foi empacotado. O aplicativo usar√° o Node.js do sistema.');
        }

        // 10. Verificar se o backend e node_modules foram empacotados
        const backendPath = path.join(unpackedPath, 'backend');
        const nodeModulesPath = path.join(backendPath, 'node_modules');

        if (checkDirectory(backendPath) && checkDirectory(nodeModulesPath)) {
            console.log('‚úÖ Backend e node_modules empacotados com sucesso!');
        } else {
            console.error('‚ùå Backend ou node_modules n√£o foram empacotados corretamente');
            process.exit(1);
        }

        console.log('\nüéâ Build standalone conclu√≠do com sucesso!');
        console.log(`üìÅ Instalador dispon√≠vel em: ${path.join(distPath, 'Sistema de Gest√£o de Estoque Setup 1.0.0.exe')}`);
        console.log('\nüìã Resumo do que foi empacotado:');
        console.log('   ‚úÖ Backend compilado');
        console.log('   ‚úÖ node_modules do backend');
        console.log('   ‚úÖ Frontend compilado');
        console.log('   ‚úÖ Node.js (se dispon√≠vel)');
        console.log('   ‚úÖ Banco de dados SQLite');
        console.log('\nüöÄ O aplicativo agora √© completamente standalone!');

    } catch (error) {
        console.error('‚ùå Erro durante o build:', error);
        process.exit(1);
    }
}

// Executar o build
buildStandalone(); 